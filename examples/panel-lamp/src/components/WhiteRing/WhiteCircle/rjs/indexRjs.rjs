// commonColor.rjs
export default Render({
  rectContext: null,

  // 环形色盘
  async renderAnnulusColor(id, radius, innerRingRadius ,temp = 0) {
    const canvas = await getCanvasById(id);
    canvas.width = radius * 4;
    canvas.height = radius * 4;
    if (!canvas) {
      console.error('canvas not found');
      return;
    }
    const ctx = canvas.getContext('2d');
    
    const startAngle = Math.PI * 0.75;    
    const endAngle =  Math.PI * 0.25;  
    
    ctx.beginPath();    
    ctx.arc(radius * 2, radius * 2, innerRingRadius* 2 + (radius - innerRingRadius), startAngle, endAngle); 
  
    let grd = ctx.createRadialGradient(0, radius * 2, radius * 2, radius * 4, radius * 2, radius * 2);
    grd.addColorStop(0, "#FFCD65");
    grd.addColorStop(0.7, "#FEECAB");
    grd.addColorStop(1, "#CEEDFF");
    

    //设定曲线粗细度    
    ctx.lineWidth = (radius - innerRingRadius) * 2;    
    //给曲线着色    
    ctx.strokeStyle = grd;      
    //连接处样式    
    ctx.lineCap = 'round';    
    //给环着色    
    ctx.stroke();    
    ctx.closePath();
    canvas.style.width = `${radius * 2}px`;
    canvas.style.height = `${radius * 2}px`;
    this.annulusContext = ctx;
    this.renderAnnulusColorThumb(id, temp);
  },
  async renderAnnulusColorThumb(id, temp = 0) {
    if (!this.canvasThumb) {
      this.canvasThumb = await getCanvasById(`${id}_thumb`);
      this.canvasThumbCtx = this.canvasThumb.getContext('2d');
    }
    this.addEventListeners();
    this._getAnglePositionByValue(temp);
  },
  async checkIsRender(id){
    const canvas = await getCanvasById(id);
    if(canvas){
      this.callMethod('getCanvas', canvas);
    }
  },
  _setCircles (radius, innerRingRadius) {
    this.radius = radius;
    this.innerRingRadius = innerRingRadius;
  },
  _getAnglePositionByValue(value) {
    const ctx = this.annulusContext;
    const angle = 135 + (value / 1000) * 270;
    const x = this.radius + (this.innerRingRadius + (this.radius - this.innerRingRadius) / 2) * Math.cos((angle * Math.PI) / 180);
    const y = this.radius + (this.innerRingRadius + (this.radius - this.innerRingRadius) / 2) * Math.sin((angle * Math.PI) / 180);
    const { data } = ctx.getImageData(x * 2, y * 2, 1, 1);
    this.updateThumbPosition(x, y,{r:data[0],g:data[1],b:data[2]});
  },
  updateThumbPosition(x, y, rgb) {
    if (!this.canvasThumb) {
      console.error('canvasThumb not found');
      return;
    }
    let ctx= this.canvasThumbCtx;
    this.canvasThumb.width = this.radius * 4;
    this.canvasThumb.height = this.radius * 4;
    ctx.clearRect(0, 0, this.canvasThumb.width, this.canvasThumb.height);
    ctx.beginPath();
    const radius = (this.radius - this.innerRingRadius - 4); // 圆弧半径
    const startAngle = 0; // 开始点
    const endAngle = 2 * Math.PI; // 结束点
    ctx.arc(x * 2, y * 2, radius, startAngle, endAngle, true);
    ctx.shadowBlur = 24;
    ctx.shadowColor = "rgba(0, 0, 0, 0.2)";
    ctx.fillStyle = 'rgb('+rgb.r+','+rgb.g+','+rgb.b+')';
    ctx.fill();
    ctx.strokeStyle = '#fff';
    ctx.lineWidth = 8;
    ctx.stroke();
    this.canvasThumb.style.width = `${this.radius * 2}px`;
    this.canvasThumb.style.height = `${this.radius * 2}px`;
  },
  getAnnulusImageData(x, y) {
    const ctx = this.annulusContext;
    if (!ctx) {
      console.error('ctx not found');
      return;
    }
    const { data } = ctx.getImageData(x * 2, y * 2, 1, 1);
    const r = data[0];
    const g = data[1];
    const b = data[2];
    this.updateThumbPosition(x, y, { r, g, b });
    const dataRes = {
      position:{x,y},
      touchType: this.touchType,
    };
    this.callMethod('_getAnnulusImageData', dataRes);
  },
  _getRgb(x, y) {
    if(x && y){
      this.getAnnulusImageData(x, y);
    }
  },
  _getValidMaxMinRes(x, y) {
    const { radius, innerRingRadius } = this;
    const xDistance = Math.abs(x - radius);
    const yDistance = Math.abs(y - radius);
    const distance = Math.sqrt(xDistance * xDistance + yDistance * yDistance);
    const radian = Math.atan2(y - radius, x - radius);
    const angle = radian * (180 / Math.PI);
    if (angle < 45 || angle > 135) {
      const thumbPositionY = radius + (innerRingRadius + (radius - innerRingRadius) / 2) * Math.sin(Math.atan2(y - radius, x - radius));
      const thumbPositionX = radius + (innerRingRadius + (radius - innerRingRadius) / 2) * Math.cos(Math.atan2(y - radius, x - radius));
      return { x:thumbPositionX, y:thumbPositionY};
    } 
    if (angle >= 45 && angle < 80) {
      const thumbPositionY = radius + (innerRingRadius + (radius - innerRingRadius) / 2) * Math.sin(Math.atan2(210 - radius, 210 - radius));
      const thumbPositionX = radius + (innerRingRadius + (radius - innerRingRadius) / 2) * Math.cos(Math.atan2(210 - radius, 210 - radius));
      return { x:thumbPositionX, y:thumbPositionY};
    }
    if (angle > 115 && angle <= 135) {
      const thumbPositionY = radius + (innerRingRadius + (radius - innerRingRadius) / 2) * Math.sin(Math.atan2(210 - radius, 70 - radius));
      const thumbPositionX = radius + (innerRingRadius + (radius - innerRingRadius) / 2) * Math.cos(Math.atan2(210 - radius, 70 - radius));
      return { x:thumbPositionX, y:thumbPositionY};
    }
  },
  handleCanvasStartEvent(evt) {
    this.touchType = 'start';
    const { changedTouches } = evt;
    const [point] = changedTouches;
    const { top, left } = this.canvasThumb.getBoundingClientRect();
    const validXY = this._getValidMaxMinRes(point.clientX - left, point.clientY - top);
    this._getRgb(validXY?.x, validXY?.y);
  },
  handleCanvasEndEvent(evt) {
    this.touchType = 'end';
    const { changedTouches } = evt;
    const [point] = changedTouches;
    const { top, left } = this.canvasThumb.getBoundingClientRect();
    const validXY = this._getValidMaxMinRes(point.clientX - left, point.clientY - top);
    this._getRgb(validXY?.x, validXY?.y);
  },
  handleCanvasMoveEvent(evt) {
    this.touchType = 'move';
    const { changedTouches } = evt;
    const [point] = changedTouches;
    const { top, left } = this.canvasThumb.getBoundingClientRect();
    const validXY = this._getValidMaxMinRes(point.clientX - left, point.clientY - top);
    this._getRgb(validXY?.x, validXY?.y);
  },
  addEventListeners() {
    this.canvasThumb.addEventListener('touchstart', this.handleCanvasStartEvent, false);
    this.canvasThumb.addEventListener('touchmove', this.handleCanvasMoveEvent, false);
    this.canvasThumb.addEventListener('touchend', this.handleCanvasEndEvent, false);
  },
  removeEventListeners() {
    this.canvasThumb.removeEventListener('touchstart', this.handleCanvasStartEvent);
    this.canvasThumb.removeEventListener('touchmove', this.handleCanvasMoveEvent);
    this.canvasThumb.removeEventListener('touchend', this.handleCanvasEndEvent);
  },
});
